{
  "address": "0x7B64Df0F3F1373E6c41aCa151F0E56dC71e0159D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWstETH",
          "name": "wstETH_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "mainSource_",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "hops",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "contract IChainlinkAggregatorV3",
                  "name": "feed",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "invertRate",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "token0Decimals",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ChainlinkOracleImpl.ChainlinkFeedData",
              "name": "feed1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IChainlinkAggregatorV3",
                  "name": "feed",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "invertRate",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "token0Decimals",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ChainlinkOracleImpl.ChainlinkFeedData",
              "name": "feed2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IChainlinkAggregatorV3",
                  "name": "feed",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "invertRate",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "token0Decimals",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ChainlinkOracleImpl.ChainlinkFeedData",
              "name": "feed3",
              "type": "tuple"
            }
          ],
          "internalType": "struct ChainlinkOracleImpl.ChainlinkConstructorParams",
          "name": "chainlinkParams_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IRedstoneOracle",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "invertRate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "token0Decimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct RedstoneOracleImpl.RedstoneOracleData",
          "name": "redstoneOracle_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidOracleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FALLBACK_ORACLE_MAIN_SOURCE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkOracleData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainlinkExchangeRate_",
          "type": "uint256"
        },
        {
          "internalType": "contract IChainlinkAggregatorV3",
          "name": "chainlinkFeed1_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "chainlinkInvertRate1_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainlinkExchangeRate1_",
          "type": "uint256"
        },
        {
          "internalType": "contract IChainlinkAggregatorV3",
          "name": "chainlinkFeed2_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "chainlinkInvertRate2_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainlinkExchangeRate2_",
          "type": "uint256"
        },
        {
          "internalType": "contract IChainlinkAggregatorV3",
          "name": "chainlinkFeed3_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "chainlinkInvertRate3_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainlinkExchangeRate3_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redstoneOracleData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redstoneExchangeRate_",
          "type": "uint256"
        },
        {
          "internalType": "contract IRedstoneOracle",
          "name": "redstoneOracle_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "redstoneInvertRate_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wstETHOracleData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wstETHExchangeRate_",
          "type": "uint256"
        },
        {
          "internalType": "contract IWstETH",
          "name": "wstETH_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x32a457117473a12466687aa0f65c03d5c83ebfb7dab97dbd690b1e2ee35c3993",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 36,
    "gasUsed": "866984",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9a7c10018216822bab21d9559ec999588cfeb9f2aacfd1fd8ce0017d502aca87",
    "transactionHash": "0x32a457117473a12466687aa0f65c03d5c83ebfb7dab97dbd690b1e2ee35c3993",
    "logs": [],
    "blockNumber": 19061969,
    "cumulativeGasUsed": "7819602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
    1,
    {
      "hops": 2,
      "feed1": {
        "feed": "0xcfe54b5cd566ab89272946f602d76ea879cab4a8",
        "invertRate": false,
        "token0Decimals": 18
      },
      "feed2": {
        "feed": "0x8fffffd4afb6115b954bd326cbe7b4ba576818f6",
        "invertRate": true,
        "token0Decimals": 6
      },
      "feed3": {
        "feed": "0x0000000000000000000000000000000000000000",
        "invertRate": false,
        "token0Decimals": 0
      }
    },
    {
      "oracle": "0x0000000000000000000000000000000000000000",
      "invertRate": false,
      "token0Decimals": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "7ebf887c0beb7c416bcdd9525d42c955",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWstETH\",\"name\":\"wstETH_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"mainSource_\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hops\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainlinkOracleImpl.ChainlinkFeedData\",\"name\":\"feed1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainlinkOracleImpl.ChainlinkFeedData\",\"name\":\"feed2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainlinkOracleImpl.ChainlinkFeedData\",\"name\":\"feed3\",\"type\":\"tuple\"}],\"internalType\":\"struct ChainlinkOracleImpl.ChainlinkConstructorParams\",\"name\":\"chainlinkParams_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IRedstoneOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct RedstoneOracleImpl.RedstoneOracleData\",\"name\":\"redstoneOracle_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidOracleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FALLBACK_ORACLE_MAIN_SOURCE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkOracleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainlinkExchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"chainlinkFeed1_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"chainlinkInvertRate1_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkExchangeRate1_\",\"type\":\"uint256\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"chainlinkFeed2_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"chainlinkInvertRate2_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkExchangeRate2_\",\"type\":\"uint256\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"chainlinkFeed3_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"chainlinkInvertRate3_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkExchangeRate3_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redstoneOracleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redstoneExchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IRedstoneOracle\",\"name\":\"redstoneOracle_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"redstoneInvertRate_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETHOracleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstETHExchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IWstETH\",\"name\":\"wstETH_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"chainlinkParams_\":\"chainlink Oracle constructor params struct.\",\"mainSource_\":\"which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback).\",\"redstoneOracle_\":\"Redstone Oracle data. (address can be set to zero address if using Chainlink only)\",\"wstETH_\":\"address of the wstETH contract\"}}},\"title\":\"WstETH Chainlink / Redstone Oracle (with fallback)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FALLBACK_ORACLE_MAIN_SOURCE()\":{\"notice\":\"which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback).\"},\"chainlinkOracleData()\":{\"notice\":\"returns all Chainlink oracle related data as utility for easy off-chain use / block explorer in a single view method\"},\"constructor\":{\"notice\":\"sets the wstETH address, main source, Chainlink Oracle and Redstone Oracle data.\"},\"getExchangeRate()\":{\"notice\":\"Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27\"},\"redstoneOracleData()\":{\"notice\":\"returns all Redstone oracle related data as utility for easy off-chain use / block explorer in a single view method\"},\"wstETHOracleData()\":{\"notice\":\"returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method\"}},\"notice\":\"Gets the exchange rate between the underlying asset and the peg asset by using:          wstETH Oracle price in combination with rate from Chainlink price feeds (or Redstone as fallback),          hopping the 2 rates into 1 rate.          e.g. when going from wstETH to USDT:          wstETH -> stETH wstETH Oracle, stETH -> ETH Chainlink feed, ETH -> USDT Chainlink feed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/oracles/wstETHCLRSOracle.sol\":\"WstETHCLRSOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/oracle/error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract Error {\\n    error FluidOracleError(uint256 errorId_);\\n}\\n\",\"keccak256\":\"0xc7b7e945238168d216c480e9dd4fbaaf8780645d58c47f9abdaa4f29910568fe\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary ErrorTypes {\\n    /***********************************|\\n    |   UniV3CheckFallbackCLRSOracle    | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the delta between main price source and check rate source is exceeding the allowed delta\\n    uint256 internal constant UniV3CheckFallbackCLRSOracle__InvalidPrice = 60001;\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3CheckFallbackCLRSOracle__InvalidParams = 60002;\\n\\n    /***********************************|\\n    |          Chainlink Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant ChainlinkOracle__InvalidParams = 61001;\\n\\n    /***********************************|\\n    |          UniswapV3 Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3Oracle__InvalidParams = 62001;\\n\\n    /// @notice thrown when TWAP price deviation is exceeding the allowed delta\\n    uint256 internal constant UniV3Oracle__InvalidPrice = 62002;\\n\\n    /// @notice thrown when constructor is called with invalid ordered seconds agos values\\n    uint256 internal constant UniV3Oracle__InvalidSecondsAgos = 62003;\\n\\n    /// @notice thrown when constructor is called with invalid delta values > 100%\\n    uint256 internal constant UniV3Oracle__InvalidDeltas = 62004;\\n\\n    /// @notice thrown when POOL.observe() call fails\\n    uint256 internal constant UniV3Oracle__ObserveCallFailed = 62005;\\n\\n    /***********************************|\\n    |            WstETh Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WstETHOracle__InvalidParams = 63001;\\n\\n    /***********************************|\\n    |           Redstone Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant RedstoneOracle__InvalidParams = 64001;\\n\\n    /***********************************|\\n    |          Fallback Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant FallbackOracle__InvalidParams = 65001;\\n\\n    /***********************************|\\n    |       FallbackCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant FallbackCLRSOracle__ExchangeRateZero = 66001;\\n\\n    /***********************************|\\n    |         WstETHCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant WstETHCLRSOracle__ExchangeRateZero = 67001;\\n}\\n\",\"keccak256\":\"0xd56bb7b640bd16e298f4ebfb961993edec078a4334be6400e3f9f9a172787b9d\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/fluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidOracle } from \\\"./interfaces/iFluidOracle.sol\\\";\\n\\n/// @title   FluidOracle\\n/// @notice  Base contract that any Fluid Oracle must implement\\nabstract contract FluidOracle is IFluidOracle {\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRate() external view virtual returns (uint256 exchangeRate_);\\n}\\n\",\"keccak256\":\"0xdb26c5b753d614b855566682b0bb2ae14ef26d25b7b2cb3c5ba7fe79c42c079b\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/chainlinkOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { IChainlinkAggregatorV3 } from \\\"../interfaces/external/IChainlinkAggregatorV3.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   Chainlink Oracle implementation\\n/// @notice  This contract is used to get the exchange rate via up to 3 hops at Chainlink price feeds.\\n///          The rate is multiplied with the previous rate at each hop.\\n///          E.g. to go from wBTC to USDC (assuming rates for example):\\n///          1. wBTC -> BTC https://data.chain.link/ethereum/mainnet/crypto-other/wbtc-btc, rate: 0.92.\\n///          2. BTC -> USD https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd rate: 30,000.\\n///          3. USD -> USDC https://data.chain.link/ethereum/mainnet/stablecoins/usdc-usd rate: 0.98. Must invert feed: 1.02\\n///          finale rate would be: 0.92 * 30,000 * 1.02 = 28,152\\nabstract contract ChainlinkOracleImpl is OracleError {\\n    /// @notice Chainlink price feed 1 to check for the exchange rate\\n    IChainlinkAggregatorV3 internal immutable _CHAINLINK_FEED1;\\n    /// @notice Chainlink price feed 2 to check for the exchange rate\\n    IChainlinkAggregatorV3 internal immutable _CHAINLINK_FEED2;\\n    /// @notice Chainlink price feed 3 to check for the exchange rate\\n    IChainlinkAggregatorV3 internal immutable _CHAINLINK_FEED3;\\n\\n    /// @notice Flag to invert the price or not for feed 1 (to e.g. for WETH/USDC pool return prive of USDC per 1 WETH)\\n    bool internal immutable _CHAINLINK_INVERT_RATE1;\\n    /// @notice Flag to invert the price or not for feed 2 (to e.g. for WETH/USDC pool return prive of USDC per 1 WETH)\\n    bool internal immutable _CHAINLINK_INVERT_RATE2;\\n    /// @notice Flag to invert the price or not for feed 3 (to e.g. for WETH/USDC pool return prive of USDC per 1 WETH)\\n    bool internal immutable _CHAINLINK_INVERT_RATE3;\\n\\n    /// @notice constant value for price scaling to reduce gas usage for feed 1\\n    uint256 internal immutable _CHAINLINK_PRICE_SCALER_MULTIPLIER1;\\n    /// @notice constant value for inverting price to reduce gas usage for feed 1\\n    uint256 internal immutable _CHAINLINK_INVERT_PRICE_DIVIDEND1;\\n\\n    /// @notice constant value for price scaling to reduce gas usage for feed 2\\n    uint256 internal immutable _CHAINLINK_PRICE_SCALER_MULTIPLIER2;\\n    /// @notice constant value for inverting price to reduce gas usage for feed 2\\n    uint256 internal immutable _CHAINLINK_INVERT_PRICE_DIVIDEND2;\\n\\n    /// @notice constant value for price scaling to reduce gas usage for feed 3\\n    uint256 internal immutable _CHAINLINK_PRICE_SCALER_MULTIPLIER3;\\n    /// @notice constant value for inverting price to reduce gas usage for feed 3\\n    uint256 internal immutable _CHAINLINK_INVERT_PRICE_DIVIDEND3;\\n\\n    struct ChainlinkFeedData {\\n        /// @param feed           address of Chainlink feed.\\n        IChainlinkAggregatorV3 feed;\\n        /// @param invertRate     true if rate read from price feed must be inverted.\\n        bool invertRate;\\n        /// @param token0Decimals decimals of asset 0. E.g. for a USDC/ETH feed, USDC is token0 and has 6 decimals.\\n        ///                       (token1Decimals are available directly via Chainlink `FEED.decimals()`)\\n        uint256 token0Decimals;\\n    }\\n\\n    struct ChainlinkConstructorParams {\\n        /// @param param        hops count of hops, used for sanity checks. Must be 1, 2 or 3.\\n        uint8 hops;\\n        /// @param feed1        Chainlink feed 1 data. Required.\\n        ChainlinkFeedData feed1;\\n        /// @param feed2        Chainlink feed 2 data. Required if hops > 1.\\n        ChainlinkFeedData feed2;\\n        /// @param feed3        Chainlink feed 3 data. Required if hops > 2.\\n        ChainlinkFeedData feed3;\\n    }\\n\\n    /// @notice constructor sets the Chainlink price feed and invertRate flag for each hop.\\n    /// E.g. `invertRate_` should be true if for the USDC/ETH pool it's expected that the oracle returns USDC per 1 ETH\\n    constructor(ChainlinkConstructorParams memory params_) {\\n        if (\\n            (params_.hops < 1 || params_.hops > 3) || // hops must be 1, 2 or 3\\n            (address(params_.feed1.feed) == address(0) || params_.feed1.token0Decimals == 0) || // first feed must always be defined\\n            (params_.hops > 1 && (address(params_.feed2.feed) == address(0) || params_.feed2.token0Decimals == 0)) || // if hops > 1, feed 2 must be defined\\n            (params_.hops > 2 && (address(params_.feed3.feed) == address(0) || params_.feed3.token0Decimals == 0)) // if hops > 2, feed 3 must be defined\\n        ) {\\n            revert FluidOracleError(ErrorTypes.ChainlinkOracle__InvalidParams);\\n        }\\n\\n        _CHAINLINK_FEED1 = params_.feed1.feed;\\n        _CHAINLINK_FEED2 = params_.feed2.feed;\\n        _CHAINLINK_FEED3 = params_.feed3.feed;\\n\\n        _CHAINLINK_INVERT_RATE1 = params_.feed1.invertRate;\\n        _CHAINLINK_INVERT_RATE2 = params_.feed2.invertRate;\\n        _CHAINLINK_INVERT_RATE3 = params_.feed3.invertRate;\\n\\n        // Actual desired output rate example USDC/ETH (6 decimals / 18 decimals).\\n        // Note ETH has 12 decimals more than USDC.\\n        //    0.000515525322211842331991619857165357691 // 39 decimals.  ETH for 1 USDC\\n        // 1954.190000000000433             // 15 decimals. USDC for 1 ETH\\n\\n        // to get to PRICE_SCLAER_MULTIPLIER and INVERT_PRICE_DIVIDEND:\\n        // fetched Chainlink price is in token1Decimals per 1 token0Decimals.\\n        // E.g. for an USDC/ETH price feed it's in ETH 18 decimals.\\n        //      for an  BTC/USD price feed it's in USD  8 decimals.\\n        // So to scale to 1e27 we need to multiply by 1e27 - token0Decimals.\\n        // E.g. for USDC/ETH it would be: fetchedPrice * 1e21\\n        //\\n        // or for inverted (x token0 per 1 token1), formula would be:\\n        //    = 1e27 * 10**token0Decimals / fetchedPrice\\n        // E.g. for USDC/ETH it would be: 1e33 / fetchedPrice\\n\\n        // no support for token1Decimals with more than OracleUtils.RATE_OUTPUT_DECIMALS decimals for now as extremely unlikely case\\n        _CHAINLINK_PRICE_SCALER_MULTIPLIER1 = 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - params_.feed1.token0Decimals);\\n        _CHAINLINK_INVERT_PRICE_DIVIDEND1 = 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS + params_.feed1.token0Decimals);\\n\\n        _CHAINLINK_PRICE_SCALER_MULTIPLIER2 = params_.hops > 1\\n            ? 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - params_.feed2.token0Decimals)\\n            : 1;\\n        _CHAINLINK_INVERT_PRICE_DIVIDEND2 = params_.hops > 1\\n            ? 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS + params_.feed2.token0Decimals)\\n            : 1;\\n\\n        _CHAINLINK_PRICE_SCALER_MULTIPLIER3 = params_.hops > 2\\n            ? 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - params_.feed3.token0Decimals)\\n            : 1;\\n        _CHAINLINK_INVERT_PRICE_DIVIDEND3 = params_.hops > 2\\n            ? 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS + params_.feed3.token0Decimals)\\n            : 1;\\n    }\\n\\n    /// @dev            Get the exchange rate from Chainlike oracle price feed(s)\\n    /// @return rate_   The exchange rate in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n    function _getChainlinkExchangeRate() internal view returns (uint256 rate_) {\\n        rate_ = _readFeedRate(\\n            _CHAINLINK_FEED1,\\n            _CHAINLINK_INVERT_RATE1,\\n            _CHAINLINK_PRICE_SCALER_MULTIPLIER1,\\n            _CHAINLINK_INVERT_PRICE_DIVIDEND1\\n        );\\n        if (rate_ == 0 || address(_CHAINLINK_FEED2) == address(0)) {\\n            // rate 0 or only 1 hop -> return rate of price feed 1\\n            return rate_;\\n        }\\n        rate_ =\\n            (rate_ *\\n                _readFeedRate(\\n                    _CHAINLINK_FEED2,\\n                    _CHAINLINK_INVERT_RATE2,\\n                    _CHAINLINK_PRICE_SCALER_MULTIPLIER2,\\n                    _CHAINLINK_INVERT_PRICE_DIVIDEND2\\n                )) /\\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS);\\n\\n        if (rate_ == 0 || address(_CHAINLINK_FEED3) == address(0)) {\\n            // rate 0 or 2 hops -> return rate of feed 1 combined with feed 2\\n            return rate_;\\n        }\\n\\n        // 3 hops -> return rate of feed 1 combined with feed 2 & feed 3\\n        rate_ =\\n            (rate_ *\\n                _readFeedRate(\\n                    _CHAINLINK_FEED3,\\n                    _CHAINLINK_INVERT_RATE3,\\n                    _CHAINLINK_PRICE_SCALER_MULTIPLIER3,\\n                    _CHAINLINK_INVERT_PRICE_DIVIDEND3\\n                )) /\\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS);\\n    }\\n\\n    /// @dev reads the exchange `rate_` from a Chainlink price `feed_` taking into account scaling and `invertRate_`\\n    function _readFeedRate(\\n        IChainlinkAggregatorV3 feed_,\\n        bool invertRate_,\\n        uint256 priceMultiplier_,\\n        uint256 invertDividend_\\n    ) private view returns (uint256 rate_) {\\n        try feed_.latestRoundData() returns (uint80, int256 exchangeRate_, uint256, uint256, uint80) {\\n            // Return the price in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n            if (invertRate_) {\\n                return invertDividend_ / uint256(exchangeRate_);\\n            } else {\\n                return uint256(exchangeRate_) * priceMultiplier_;\\n            }\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice returns all Chainlink oracle related data as utility for easy off-chain use / block explorer in a single view method\\n    function chainlinkOracleData()\\n        public\\n        view\\n        returns (\\n            uint256 chainlinkExchangeRate_,\\n            IChainlinkAggregatorV3 chainlinkFeed1_,\\n            bool chainlinkInvertRate1_,\\n            uint256 chainlinkExchangeRate1_,\\n            IChainlinkAggregatorV3 chainlinkFeed2_,\\n            bool chainlinkInvertRate2_,\\n            uint256 chainlinkExchangeRate2_,\\n            IChainlinkAggregatorV3 chainlinkFeed3_,\\n            bool chainlinkInvertRate3_,\\n            uint256 chainlinkExchangeRate3_\\n        )\\n    {\\n        return (\\n            _getChainlinkExchangeRate(),\\n            _CHAINLINK_FEED1,\\n            _CHAINLINK_INVERT_RATE1,\\n            _readFeedRate(\\n                _CHAINLINK_FEED1,\\n                _CHAINLINK_INVERT_RATE1,\\n                _CHAINLINK_PRICE_SCALER_MULTIPLIER1,\\n                _CHAINLINK_INVERT_PRICE_DIVIDEND1\\n            ),\\n            _CHAINLINK_FEED2,\\n            _CHAINLINK_INVERT_RATE2,\\n            address(_CHAINLINK_FEED2) == address(0)\\n                ? 0\\n                : _readFeedRate(\\n                    _CHAINLINK_FEED2,\\n                    _CHAINLINK_INVERT_RATE2,\\n                    _CHAINLINK_PRICE_SCALER_MULTIPLIER2,\\n                    _CHAINLINK_INVERT_PRICE_DIVIDEND2\\n                ),\\n            _CHAINLINK_FEED3,\\n            _CHAINLINK_INVERT_RATE3,\\n            address(_CHAINLINK_FEED3) == address(0)\\n                ? 0\\n                : _readFeedRate(\\n                    _CHAINLINK_FEED3,\\n                    _CHAINLINK_INVERT_RATE3,\\n                    _CHAINLINK_PRICE_SCALER_MULTIPLIER3,\\n                    _CHAINLINK_INVERT_PRICE_DIVIDEND3\\n                )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x184c23d4eb5c69dad7fd0860988dc319c4a2a9ce1e1ecf8a0610c804e039f90d\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/fallbackOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { IRedstoneOracle } from \\\"../interfaces/external/IRedstoneOracle.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { ChainlinkOracleImpl } from \\\"./chainlinkOracleImpl.sol\\\";\\nimport { RedstoneOracleImpl } from \\\"./redstoneOracleImpl.sol\\\";\\n\\n/// @title   Fallback Oracle implementation\\n/// @notice  This contract is used to get the exchange rate from a main oracle feed and a fallback oracle feed.\\n//\\n// @dev     inheriting contracts should implement a view method to expose `_FALLBACK_ORACLE_MAIN_SOURCE`\\nabstract contract FallbackOracleImpl is OracleError, RedstoneOracleImpl, ChainlinkOracleImpl {\\n    /// @dev which oracle to use as main source:\\n    /// - 1 = Chainlink ONLY (no fallback)\\n    /// - 2 = Chainlink with Redstone Fallback\\n    /// - 3 = Redstone with Chainlink Fallback\\n    uint8 internal immutable _FALLBACK_ORACLE_MAIN_SOURCE;\\n\\n    /// @notice                     sets the main source, Chainlink Oracle and Redstone Oracle data.\\n    /// @param mainSource_          which oracle to use as main source:\\n    ///                                  - 1 = Chainlink ONLY (no fallback)\\n    ///                                  - 2 = Chainlink with Redstone Fallback\\n    ///                                  - 3 = Redstone with Chainlink Fallback\\n    /// @param chainlinkParams_     chainlink Oracle constructor params struct.\\n    /// @param redstoneOracle_      Redstone Oracle data. (address can be set to zero address if using Chainlink only)\\n    constructor(\\n        uint8 mainSource_,\\n        ChainlinkConstructorParams memory chainlinkParams_,\\n        RedstoneOracleData memory redstoneOracle_\\n    )\\n        ChainlinkOracleImpl(chainlinkParams_)\\n        RedstoneOracleImpl(\\n            address(redstoneOracle_.oracle) == address(0)\\n                ? RedstoneOracleData(IRedstoneOracle(_REDSTONE_ORACLE_NOT_SET_ADDRESS), false, 1)\\n                : redstoneOracle_\\n        )\\n    {\\n        if (mainSource_ < 1 || mainSource_ > 3) {\\n            revert FluidOracleError(ErrorTypes.FallbackOracle__InvalidParams);\\n        }\\n        _FALLBACK_ORACLE_MAIN_SOURCE = mainSource_;\\n    }\\n\\n    /// @dev returns the exchange rate for the main oracle source, or the fallback source (if configured) if the main exchange rate\\n    /// fails to be fetched. If returned rate is 0, fetching rate failed or something went wrong.\\n    function _getRateWithFallback() internal view returns (uint256 exchangeRate_) {\\n        if (_FALLBACK_ORACLE_MAIN_SOURCE == 1) {\\n            // 1 = Chainlink ONLY (no fallback)\\n            exchangeRate_ = _getChainlinkExchangeRate();\\n        } else if (_FALLBACK_ORACLE_MAIN_SOURCE == 2) {\\n            // 2 = Chainlink with Redstone Fallback\\n            exchangeRate_ = _getChainlinkExchangeRate();\\n            if (exchangeRate_ == 0) {\\n                exchangeRate_ = _getRedstoneExchangeRate();\\n            }\\n        } else {\\n            // 3 = Redstone with Chainlink Fallback\\n            exchangeRate_ = _getRedstoneExchangeRate();\\n            if (exchangeRate_ == 0) {\\n                exchangeRate_ = _getChainlinkExchangeRate();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1ff722d734b6062e00b02b924400999bc6d776394b21c55ddafe797d5963501\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/redstoneOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { IRedstoneOracle } from \\\"../interfaces/external/IRedstoneOracle.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   Redstone Oracle implementation\\n/// @notice  This contract is used to get the exchange rate from a Redstone Oracle\\nabstract contract RedstoneOracleImpl is OracleError {\\n    /// @notice Redstone price oracle to check for the exchange rate\\n    IRedstoneOracle internal immutable _REDSTONE_ORACLE;\\n    /// @notice Flag to invert the price or not (to e.g. for WETH/USDC pool return prive of USDC per 1 WETH)\\n    bool internal immutable _REDSTONE_INVERT_RATE;\\n\\n    /// @notice constant value for price scaling to reduce gas usage\\n    uint256 internal immutable _REDSTONE_PRICE_SCALER_MULTIPLIER;\\n    /// @notice constant value for inverting price to reduce gas usage\\n    uint256 internal immutable _REDSTONE_INVERT_PRICE_DIVIDEND;\\n\\n    address internal immutable _REDSTONE_ORACLE_NOT_SET_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    struct RedstoneOracleData {\\n        /// @param oracle         address of Redstone oracle.\\n        IRedstoneOracle oracle;\\n        /// @param invertRate     true if rate read from price feed must be inverted.\\n        bool invertRate;\\n        /// @param token0Decimals decimals of asset 0. E.g. for a USDC/ETH feed, USDC is token0 and has 6 decimals.\\n        ///                       (token1Decimals are available directly via Redstone `Oracle.decimals()`)\\n        uint256 token0Decimals;\\n    }\\n\\n    /// @notice constructor sets the Redstone oracle data\\n    constructor(RedstoneOracleData memory oracleData_) {\\n        if (address(oracleData_.oracle) == address(0) || oracleData_.token0Decimals == 0) {\\n            revert FluidOracleError(ErrorTypes.RedstoneOracle__InvalidParams);\\n        }\\n\\n        _REDSTONE_ORACLE = oracleData_.oracle;\\n        _REDSTONE_INVERT_RATE = oracleData_.invertRate;\\n\\n        // for explanation on how to get to scaler multiplier and dividend see `chainlinkOracleImpl.sol`.\\n        // no support for token1Decimals with more than OracleUtils.RATE_OUTPUT_DECIMALS decimals for now as extremely unlikely case\\n        _REDSTONE_PRICE_SCALER_MULTIPLIER = address(oracleData_.oracle) == _REDSTONE_ORACLE_NOT_SET_ADDRESS\\n            ? 1\\n            : 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - oracleData_.token0Decimals);\\n        _REDSTONE_INVERT_PRICE_DIVIDEND = address(oracleData_.oracle) == _REDSTONE_ORACLE_NOT_SET_ADDRESS\\n            ? 1\\n            : 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS + oracleData_.token0Decimals);\\n    }\\n\\n    /// @dev           Get the exchange rate from Redstone oracle\\n    /// @param rate_   The exchange rate in `_REDSTONE_OUTPUT_DECIMALS`\\n    function _getRedstoneExchangeRate() internal view returns (uint256 rate_) {\\n        try _REDSTONE_ORACLE.getExchangeRate() returns (uint256 exchangeRate_) {\\n            // Return the price in `_REDSTONE_OUTPUT_DECIMALS`\\n            if (_REDSTONE_INVERT_RATE) {\\n                // invert the price\\n                return _REDSTONE_INVERT_PRICE_DIVIDEND / exchangeRate_;\\n            } else {\\n                return exchangeRate_ * _REDSTONE_PRICE_SCALER_MULTIPLIER;\\n            }\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice returns all Redstone oracle related data as utility for easy off-chain use / block explorer in a single view method\\n    function redstoneOracleData()\\n        public\\n        view\\n        returns (uint256 redstoneExchangeRate_, IRedstoneOracle redstoneOracle_, bool redstoneInvertRate_)\\n    {\\n        return (\\n            address(_REDSTONE_ORACLE) == _REDSTONE_ORACLE_NOT_SET_ADDRESS ? 0 : _getRedstoneExchangeRate(),\\n            _REDSTONE_ORACLE,\\n            _REDSTONE_INVERT_RATE\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x73c577872730e8da3042ef58da01800f6423bb1a17aad57331ee97c610c19853\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/wstETHOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IWstETH } from \\\"../interfaces/external/IWstETH.sol\\\";\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   wstETH Oracle Implementation\\n/// @notice  This contract is used to get the exchange rate between wstETH and stETH\\nabstract contract WstETHOracleImpl is OracleError {\\n    /// @notice constant value for price scaling to reduce gas usage\\n    uint256 internal immutable _WSTETH_PRICE_SCALER_MULTIPLIER;\\n\\n    /// @notice WSTETH contract, e.g. on mainnet 0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0\\n    IWstETH internal immutable _WSTETH;\\n\\n    /// @notice constructor sets the wstETH `wstETH_` token address.\\n    constructor(IWstETH wstETH_) {\\n        if (address(wstETH_) == address(0)) {\\n            revert FluidOracleError(ErrorTypes.WstETHOracle__InvalidParams);\\n        }\\n\\n        _WSTETH = wstETH_;\\n\\n        _WSTETH_PRICE_SCALER_MULTIPLIER = 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - 18); // e.g. 1e9\\n    }\\n\\n    /// @notice         Get the exchange rate from wstETH contract\\n    /// @return rate_   The exchange rate in `WSTETH_OUTPUT_DECIMALS`\\n    function _getWstETHExchangeRate() internal view returns (uint256 rate_) {\\n        return _WSTETH.stEthPerToken() * _WSTETH_PRICE_SCALER_MULTIPLIER;\\n    }\\n\\n    /// @notice returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method\\n    function wstETHOracleData() public view returns (uint256 wstETHExchangeRate_, IWstETH wstETH_) {\\n        return (_getWstETHExchangeRate(), _WSTETH);\\n    }\\n}\\n\",\"keccak256\":\"0xd30d0a771c31cca1597753bfc38d35ec1e6a401de9f98426ca36e7f795d625f0\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/external/IChainlinkAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/// from https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n/// Copyright (c) 2018 SmartContract ChainLink, Ltd.\\n\\ninterface IChainlinkAggregatorV3 {\\n    /// @notice represents the number of decimals the aggregator responses represent.\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xaeea1f12d1c381bde8418eab05206d6472b246158584190fce0d09913912a7ef\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/external/IRedstoneOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IRedstoneOracle {\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset\\n    // @dev custom Redstone adapter for Instadapp implementation\\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\\n\\n    /**\\n     * @notice Returns the number of decimals for the price feed\\n     * @dev By default, RedStone uses 8 decimals for data feeds\\n     * @return decimals The number of decimals in the price feed values\\n     */\\n    // see https://github.com/redstone-finance/redstone-oracles-monorepo/blob/main/packages/on-chain-relayer/contracts/price-feeds/PriceFeedBase.sol#L51C12-L51C20\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd9a844e86035a935fe06c5937d2fb8796fd150771716246b77c6226e32c9d129\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/external/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IWstETH {\\n    /**\\n     * @notice Get amount of stETH for 1 wstETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for 1 stETH\\n     * @return Amount of wstETH for 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe6c8477bea4b01e693d5a8ca635e795e203fe53ddee0fb30f3dcf9a0e5f4f61\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/iFluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidOracle {\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27\\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\\n}\\n\",\"keccak256\":\"0xcbdd2f8aa2dc30ef9865e9d8505705254fd106ecd239c59b39bdbf6801526497\",\"license\":\"MIT\"},\"contracts/oracle/libraries/oracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title Oracle utils library\\n/// @notice implements common utility methods for Fluid Oracles\\nlibrary OracleUtils {\\n    /// @dev The scaler for max delta point math (100%)\\n    uint256 internal constant HUNDRED_PERCENT_DELTA_SCALER = 10_000;\\n    /// @dev output precision of rates\\n    uint256 internal constant RATE_OUTPUT_DECIMALS = 27;\\n\\n    /// @dev checks if `mainSourceRate_` is within a `maxDeltaPercent_` of `checkSourceRate_`. Returns true if so.\\n    function isRateOutsideDelta(\\n        uint256 mainSourceRate_,\\n        uint256 checkSourceRate_,\\n        uint256 maxDeltaPercent_\\n    ) internal pure returns (bool) {\\n        uint256 offset_ = (checkSourceRate_ * maxDeltaPercent_) / HUNDRED_PERCENT_DELTA_SCALER;\\n        return (mainSourceRate_ > (checkSourceRate_ + offset_) || mainSourceRate_ < (checkSourceRate_ - offset_));\\n    }\\n}\\n\",\"keccak256\":\"0x968b1a0606875abd523895c5075cf6c34c296919e77b0da7dd952374398e2a4c\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/oracles/wstETHCLRSOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { FluidOracle } from \\\"../fluidOracle.sol\\\";\\nimport { WstETHOracleImpl } from \\\"../implementations/wstETHOracleImpl.sol\\\";\\nimport { FallbackOracleImpl } from \\\"../implementations/fallbackOracleImpl.sol\\\";\\nimport { IWstETH } from \\\"../interfaces/external/IWstETH.sol\\\";\\nimport { ChainlinkOracleImpl } from \\\"../implementations/chainlinkOracleImpl.sol\\\";\\nimport { IRedstoneOracle } from \\\"../interfaces/external/IRedstoneOracle.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\n\\n/// @title   WstETH Chainlink / Redstone Oracle (with fallback)\\n/// @notice  Gets the exchange rate between the underlying asset and the peg asset by using:\\n///          wstETH Oracle price in combination with rate from Chainlink price feeds (or Redstone as fallback),\\n///          hopping the 2 rates into 1 rate.\\n///          e.g. when going from wstETH to USDT:\\n///          wstETH -> stETH wstETH Oracle, stETH -> ETH Chainlink feed, ETH -> USDT Chainlink feed.\\ncontract WstETHCLRSOracle is FluidOracle, WstETHOracleImpl, FallbackOracleImpl {\\n    /// @notice                     sets the wstETH address, main source, Chainlink Oracle and Redstone Oracle data.\\n    /// @param wstETH_              address of the wstETH contract\\n    /// @param mainSource_          which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback).\\n    /// @param chainlinkParams_     chainlink Oracle constructor params struct.\\n    /// @param redstoneOracle_      Redstone Oracle data. (address can be set to zero address if using Chainlink only)\\n    constructor(\\n        IWstETH wstETH_,\\n        uint8 mainSource_,\\n        ChainlinkConstructorParams memory chainlinkParams_,\\n        RedstoneOracleData memory redstoneOracle_\\n    ) WstETHOracleImpl(wstETH_) FallbackOracleImpl(mainSource_, chainlinkParams_, redstoneOracle_) {}\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRate() external view override returns (uint256 exchangeRate_) {\\n        exchangeRate_ = _getRateWithFallback();\\n\\n        if (exchangeRate_ == 0) {\\n            // revert if fetched exchange rate is 0\\n            revert FluidOracleError(ErrorTypes.WstETHCLRSOracle__ExchangeRateZero);\\n        }\\n\\n        return (_getWstETHExchangeRate() * exchangeRate_) / (10 ** OracleUtils.RATE_OUTPUT_DECIMALS);\\n    }\\n\\n    /// @notice which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback).\\n    function FALLBACK_ORACLE_MAIN_SOURCE() public view returns (uint8) {\\n        return _FALLBACK_ORACLE_MAIN_SOURCE;\\n    }\\n}\\n\",\"keccak256\":\"0xee0327e7f31586e87fc673068b5dd02f538624ff63d04cd2d30901789208edc7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61030060405261dead610140523480156200001957600080fd5b50604051620017a8380380620017a88339810160408190526200003c916200057c565b805183908390839082906001600160a01b0316156200005c578162000088565b6040518060600160405280610140516001600160a01b0316815260200160001515815260200160018152505b886001600160a01b038116620000ba5760405163c82fc46560e01b815261f61960048201526024015b60405180910390fd5b6001600160a01b03811660a052620000d56012601b62000697565b620000e290600a620007b0565b6080525080516001600160a01b031615806200010057506040810151155b15620001245760405163c82fc46560e01b815261fa016004820152602401620000b1565b80516001600160a01b0390811660c0526020820151151560e0526101405182518216911614620001735760408101516200016090601b62000697565b6200016d90600a620007b0565b62000176565b60015b610100526101405181516001600160a01b03908116911614620001b8576040810151620001a590601b620007c5565b620001b290600a620007b0565b620001bb565b60015b61012052508051600160ff9091161080620001dd57506003816000015160ff16115b806200020657506020810151516001600160a01b03161580620002065750602081015160400151155b806200024157506001816000015160ff161180156200024157506040810151516001600160a01b031615806200024157506040808201510151155b806200027d57506002816000015160ff161180156200027d57506060810151516001600160a01b031615806200027d5750606081015160400151155b15620002a15760405163c82fc46560e01b815261ee496004820152602401620000b1565b60208082018051516001600160a01b03908116610160526040808501805151831661018052606086018051519093166101a052835185015115156101c0525184015115156101e0529051909201511515610200525101516200030590601b62000697565b6200031290600a620007b0565b610220526020810151604001516200032c90601b620007c5565b6200033990600a620007b0565b610240528051600160ff909116116200035457600162000376565b60408082015101516200036990601b62000697565b6200037690600a620007b0565b610260528051600160ff9091161162000391576001620003b3565b6040808201510151620003a690601b620007c5565b620003b390600a620007b0565b610280528051600260ff90911611620003ce576001620003f1565b606081015160400151620003e490601b62000697565b620003f190600a620007b0565b6102a0528051600260ff909116116200040c5760016200042f565b6060810151604001516200042290601b620007c5565b6200042f90600a620007b0565b6102c05250600160ff841610806200044a575060038360ff16115b156200046e5760405163c82fc46560e01b815261fde96004820152602401620000b1565b505060ff166102e05250620007db92505050565b6001600160a01b03811681146200049857600080fd5b50565b805160ff81168114620004ad57600080fd5b919050565b604051606081016001600160401b0381118282101715620004e357634e487b7160e01b600052604160045260246000fd5b60405290565b604051608081016001600160401b0381118282101715620004e357634e487b7160e01b600052604160045260246000fd5b80518015158114620004ad57600080fd5b6000606082840312156200053e57600080fd5b62000548620004b2565b90508151620005578162000482565b815262000567602083016200051a565b60208201526040820151604082015292915050565b6000806000808486036101e08112156200059557600080fd5b8551620005a28162000482565b9450620005b2602087016200049b565b9350610140603f1982011215620005c857600080fd5b620005d2620004e9565b620005e0604088016200049b565b8152620005f188606089016200052b565b6020820152620006058860c089016200052b565b60408201526200061a8861012089016200052b565b606082015280935050606061017f19820112156200063757600080fd5b5062000642620004b2565b610180860151620006538162000482565b8152620006646101a087016200051a565b60208201526101c086015160408201528091505092959194509250565b634e487b7160e01b600052601160045260246000fd5b81810381811115620006ad57620006ad62000681565b92915050565b600181815b80851115620006f4578160001904821115620006d857620006d862000681565b80851615620006e657918102915b93841c9390800290620006b8565b509250929050565b6000826200070d57506001620006ad565b816200071c57506000620006ad565b8160018114620007355760028114620007405762000760565b6001915050620006ad565b60ff84111562000754576200075462000681565b50506001821b620006ad565b5060208310610133831016604e8410600b841016171562000785575081810a620006ad565b620007918383620006b3565b8060001904821115620007a857620007a862000681565b029392505050565b6000620007be8383620006fc565b9392505050565b80820180821115620006ad57620006ad62000681565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610e2e6200097a60003960008181607301528181610b2a0152610b5d015260008181610434015261084701526000818161041301526108260152600081816103420152610750015260008181610321015261072f015260008181610258015261066d015260008181610237015261064c015260008181610391015281816103f2015261080501526000818161029f01528181610300015261070e0152600081816101d101528181610216015261062b015260008181610370015281816103d10152818161079401526107e401526000818161027e015281816102df0152818161069d01526106ed0152600081816101b0015281816101f5015261060a0152600061048701526000610a1301526000610a4201526000818161052e01526109e90152600081816104be0152818161050b015261093a0152600081816105610152610a8f01526000610a6e0152610e2e6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806388c352091161005057806388c3520914610115578063dfaba9b51461014f578063e6aa216c1461018157600080fd5b80633437eac41461006c5780637557ca41146100a2575b600080fd5b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b6100aa610197565b604080519a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c0152971515978a01979097526060890195909552928616608088015290151560a087015260c086015290921660e084015290151561010083015261012082015261014001610099565b61011d610480565b6040805193845273ffffffffffffffffffffffffffffffffffffffff9092166020840152151590820152606001610099565b610157610553565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610099565b610189610586565b604051908152602001610099565b6000806000806000806000806000806101ae610603565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061027c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82161561036b576103667f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b61036e565b60005b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82161561045d576104587f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b610460565b60005b995099509950995099509950995099509950995090919293949596979899565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461050557610500610936565b610508565b60005b937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b60008061055e610a6a565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b6000610590610b26565b9050806000036105d5576040517fc82fc465000000000000000000000000000000000000000000000000000000008152620105b9600482015260240160405180910390fd5b6105e1601b600a610d0b565b816105ea610a6a565b6105f49190610d1e565b6105fe9190610d35565b905090565b60006106917f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b90508015806106d457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16155b156106dc5790565b6106e8601b600a610d0b565b6107747f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b61077e9083610d1e565b6107889190610d35565b90508015806107cb57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16155b156107d35790565b6107df601b600a610d0b565b61086b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b6105f49083610d1e565b60008473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156108fc575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108f991810190610d8f565b60015b6109085750600061092e565b8815610924576109188488610d35565b9550505050505061092e565b6109188885610d1e565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156109dd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526109da91810190610ddf565b60015b6109e75750600090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3d57610a37817f0000000000000000000000000000000000000000000000000000000000000000610d35565b91505090565b610a377f000000000000000000000000000000000000000000000000000000000000000082610d1e565b90565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663035faf826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190610ddf565b6105fe9190610d1e565b60007f000000000000000000000000000000000000000000000000000000000000000060ff16600103610b5b576105fe610603565b7f000000000000000000000000000000000000000000000000000000000000000060ff16600203610ba057610b8e610603565b905080600003610a67576105fe610936565b610ba8610936565b905080600003610a67576105fe610603565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610c4257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610c2857610c28610bba565b80851615610c3557918102915b93841c9390800290610bee565b509250929050565b600082610c5957506001610d05565b81610c6657506000610d05565b8160018114610c7c5760028114610c8657610ca2565b6001915050610d05565b60ff841115610c9757610c97610bba565b50506001821b610d05565b5060208310610133831016604e8410600b8410161715610cc5575081810a610d05565b610ccf8383610be9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d0157610d01610bba565b0290505b92915050565b6000610d178383610c4a565b9392505050565b8082028115828204841417610d0557610d05610bba565b600082610d6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610d8a57600080fd5b919050565b600080600080600060a08688031215610da757600080fd5b610db086610d70565b9450602086015193506040860151925060608601519150610dd360808701610d70565b90509295509295909350565b600060208284031215610df157600080fd5b505191905056fea2646970667358221220d16090907a2bda9ed5d158f06b9b78873b790aef506e3a8801bbaf65b54eb97c64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806388c352091161005057806388c3520914610115578063dfaba9b51461014f578063e6aa216c1461018157600080fd5b80633437eac41461006c5780637557ca41146100a2575b600080fd5b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b6100aa610197565b604080519a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c0152971515978a01979097526060890195909552928616608088015290151560a087015260c086015290921660e084015290151561010083015261012082015261014001610099565b61011d610480565b6040805193845273ffffffffffffffffffffffffffffffffffffffff9092166020840152151590820152606001610099565b610157610553565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610099565b610189610586565b604051908152602001610099565b6000806000806000806000806000806101ae610603565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061027c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82161561036b576103667f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b61036e565b60005b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82161561045d576104587f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b610460565b60005b995099509950995099509950995099509950995090919293949596979899565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461050557610500610936565b610508565b60005b937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b60008061055e610a6a565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b6000610590610b26565b9050806000036105d5576040517fc82fc465000000000000000000000000000000000000000000000000000000008152620105b9600482015260240160405180910390fd5b6105e1601b600a610d0b565b816105ea610a6a565b6105f49190610d1e565b6105fe9190610d35565b905090565b60006106917f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b90508015806106d457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16155b156106dc5790565b6106e8601b600a610d0b565b6107747f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b61077e9083610d1e565b6107889190610d35565b90508015806107cb57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16155b156107d35790565b6107df601b600a610d0b565b61086b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610875565b6105f49083610d1e565b60008473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156108fc575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108f991810190610d8f565b60015b6109085750600061092e565b8815610924576109188488610d35565b9550505050505061092e565b6109188885610d1e565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156109dd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526109da91810190610ddf565b60015b6109e75750600090565b7f000000000000000000000000000000000000000000000000000000000000000015610a3d57610a37817f0000000000000000000000000000000000000000000000000000000000000000610d35565b91505090565b610a377f000000000000000000000000000000000000000000000000000000000000000082610d1e565b90565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663035faf826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190610ddf565b6105fe9190610d1e565b60007f000000000000000000000000000000000000000000000000000000000000000060ff16600103610b5b576105fe610603565b7f000000000000000000000000000000000000000000000000000000000000000060ff16600203610ba057610b8e610603565b905080600003610a67576105fe610936565b610ba8610936565b905080600003610a67576105fe610603565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610c4257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610c2857610c28610bba565b80851615610c3557918102915b93841c9390800290610bee565b509250929050565b600082610c5957506001610d05565b81610c6657506000610d05565b8160018114610c7c5760028114610c8657610ca2565b6001915050610d05565b60ff841115610c9757610c97610bba565b50506001821b610d05565b5060208310610133831016604e8410600b8410161715610cc5575081810a610d05565b610ccf8383610be9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d0157610d01610bba565b0290505b92915050565b6000610d178383610c4a565b9392505050565b8082028115828204841417610d0557610d05610bba565b600082610d6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b805169ffffffffffffffffffff81168114610d8a57600080fd5b919050565b600080600080600060a08688031215610da757600080fd5b610db086610d70565b9450602086015193506040860151925060608601519150610dd360808701610d70565b90509295509295909350565b600060208284031215610df157600080fd5b505191905056fea2646970667358221220d16090907a2bda9ed5d158f06b9b78873b790aef506e3a8801bbaf65b54eb97c64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "chainlinkParams_": "chainlink Oracle constructor params struct.",
          "mainSource_": "which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback).",
          "redstoneOracle_": "Redstone Oracle data. (address can be set to zero address if using Chainlink only)",
          "wstETH_": "address of the wstETH contract"
        }
      }
    },
    "title": "WstETH Chainlink / Redstone Oracle (with fallback)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FALLBACK_ORACLE_MAIN_SOURCE()": {
        "notice": "which oracle to use as main source: 1 = Chainlink, 2 = Redstone (other one is fallback)."
      },
      "chainlinkOracleData()": {
        "notice": "returns all Chainlink oracle related data as utility for easy off-chain use / block explorer in a single view method"
      },
      "constructor": {
        "notice": "sets the wstETH address, main source, Chainlink Oracle and Redstone Oracle data."
      },
      "getExchangeRate()": {
        "notice": "Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27"
      },
      "redstoneOracleData()": {
        "notice": "returns all Redstone oracle related data as utility for easy off-chain use / block explorer in a single view method"
      },
      "wstETHOracleData()": {
        "notice": "returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method"
      }
    },
    "notice": "Gets the exchange rate between the underlying asset and the peg asset by using:          wstETH Oracle price in combination with rate from Chainlink price feeds (or Redstone as fallback),          hopping the 2 rates into 1 rate.          e.g. when going from wstETH to USDT:          wstETH -> stETH wstETH Oracle, stETH -> ETH Chainlink feed, ETH -> USDT Chainlink feed.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}